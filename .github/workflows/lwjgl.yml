name: LWJGL Build

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_PARAMS: --cache-control "public,must-revalidate,proxy-revalidate,max-age=0"

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    container:
      image: centos:7
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64]
        include:
          - ARCH: x64
            PACKAGES: alsa-lib-devel pulseaudio-libs-devel portaudio-devel jack-audio-connection-kit-devel dbus-devel #pipewire-devel
    defaults:
      run:
        shell: bash
    steps:
      - name: Upgrade git
        run: |
          sed -i \
            -e 's/^mirrorlist/#mirrorlist/' \
            -e 's/^#baseurl/baseurl/' \
            -e 's/mirror\.centos\.org/vault.centos.org/' \
            /etc/yum.repos.d/*.repo
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git
      - name: Clone repository
        run: git clone --depth 3 https://github.com/${{ github.repository }}.git .
      - name: Configure yum
        run: |
          yum -y install epel-release
          yum -y update
      - name: Install build dependencies
        run: |
          yum -y install centos-release-scl
          sed -i \
            -e 's/^mirrorlist/#mirrorlist/' \
            -e 's/^#baseurl/baseurl/' \
            -e 's/^# baseurl/baseurl/' \
            -e 's/mirror\.centos\.org/vault.centos.org/' \
            /etc/yum.repos.d/CentOS-SCLo-scl*.repo
          yum -y install devtoolset-11-gcc-c++
          yum -y install python3 awscli
      - name: Install more recent CMake
        run: |
          cd /usr/local/src
          curl -LO https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2-linux-x86_64.sh
          chmod +x cmake-3.22.2-linux-x86_64.sh
          ./cmake-3.22.2-linux-x86_64.sh --skip-license --exclude-subdir --prefix=/usr
      - name: Install OpenAL Soft dependencies
        run: yum -y install ${{matrix.PACKAGES}}
        #./autogen.sh -Dprefix=/usr -Dtests=disabled -Dexamples=disabled -Dsession-managers=[] -Dgstreamer=disabled -Davb=disabled -Dv4l2=disabled
      - name: Build & install recent pipewire
        run: |
          pip3 install meson
          yum -y install ninja-build which libudev-devel
          git clone --branch 0.3.50 --depth=1 https://gitlab.freedesktop.org/pipewire/pipewire.git
          cd pipewire
          source scl_source enable devtoolset-11 || true
          ./autogen.sh -Dprefix=/usr -Dtests=disabled -Dexamples=disabled -Dgstreamer=disabled -Dv4l2=disabled -Dpipewire-v4l2=disabled
          make
          make install
      - name: Configure build
        run: |
          source scl_source enable devtoolset-11 || true
          cmake -B build -DALSOFT_REQUIRE_RTKIT=ON -DALSOFT_REQUIRE_ALSA=ON -DALSOFT_REQUIRE_OSS=ON -DALSOFT_REQUIRE_PORTAUDIO=ON -DALSOFT_REQUIRE_PULSEAUDIO=ON -DALSOFT_REQUIRE_JACK=ON -DALSOFT_REQUIRE_PIPEWIRE=ON -DALSOFT_EMBED_HRTF_DATA=YES -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-U_FORTIFY_SOURCE -D_FORTIF=Y_SOURCE=0"
      - name: Build
        run: |
          source scl_source enable devtoolset-11 || true
          cmake --build build --parallel
          strip build/libopenal.so
      - name: Upload artifact
        run: aws s3 cp build/libopenal.so s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}
      - name: Upload git revision
        run: |
          git config --global --add safe.directory $PWD
          git log --first-parent --pretty=format:%H --skip 1 -n 1 > libopenal.so.git
          aws s3 cp libopenal.so.git s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}

  linux-cross:
    name: Linux Cross
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        ARCH: [arm32, arm64, ppc64le, riscv64]
        include:
          # -----
          - ARCH: arm32
            CROSS_ARCH: armhf
            TRIPLET: arm-linux-gnueabihf
            CMAKE_PARAMS: -DPROCESSOR=arm
          # -----
          - ARCH: arm64
            CROSS_ARCH: arm64
            TRIPLET: aarch64-linux-gnu
            CMAKE_PARAMS: -DPROCESSOR=aarch64
          # ----
          - ARCH: ppc64le
            CROSS_ARCH: ppc64el
            TRIPLET: powerpc64le-linux-gnu
            CMAKE_PARAMS: -DPROCESSOR=powerpc64le
          # -----
          - ARCH: riscv64
            CROSS_ARCH: riscv64
            TRIPLET: riscv64-linux-gnu
            CMAKE_PARAMS: -DPROCESSOR=riscv64
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq install awscli cmake gcc-${{matrix.TRIPLET}} g++-${{matrix.TRIPLET}} libc6-dev-${{matrix.CROSS_ARCH}}-cross
      - name: Prepare cross-compilation
        run: |
          sudo grep 'deb http' /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/^deb http/deb [arch=amd64] http/' /etc/apt/sources.list
          sudo sed -i 's#^deb http://[^ ]\+#deb [arch=${{matrix.CROSS_ARCH}}] http://ports.ubuntu.com/ubuntu-ports/#' /etc/apt/sources.list.d/ports.list
          sudo dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          sudo apt-get update || true
      - name: Install cross-compilation dependencies
        run: DEBIAN_FRONTEND=noninteractive sudo apt-get -yq --allow-unauthenticated install libpulse-dev:${{matrix.CROSS_ARCH}} portaudio19-dev:${{matrix.CROSS_ARCH}} libasound2-dev:${{matrix.CROSS_ARCH}} libjack-dev:${{matrix.CROSS_ARCH}} libdbus-1-dev:${{matrix.CROSS_ARCH}} -o Dpkg::Options::="--force-overwrite"
        #libpipewire-0.3-dev:${{matrix.CROSS_ARCH}}
      - name: Configure build
        run: CC=${{matrix.TRIPLET}}-gcc CXX=${{matrix.TRIPLET}}-g++ cmake -B build -DALSOFT_REQUIRE_RTKIT=ON -DALSOFT_REQUIRE_ALSA=ON -DALSOFT_REQUIRE_OSS=ON -DALSOFT_REQUIRE_PORTAUDIO=ON -DALSOFT_REQUIRE_PULSEAUDIO=ON -DALSOFT_REQUIRE_JACK=ON -DALSOFT_EMBED_HRTF_DATA=YES -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" -DCMAKE_TOOLCHAIN_FILE=../XCompile-Linux.txt -DHOST=${{matrix.TRIPLET}} ${{matrix.CMAKE_PARAMS}}
        #-DALSOFT_REQUIRE_PIPEWIRE=ON
      - name: Build
        run: |
          cmake --build build --parallel
          ${{matrix.TRIPLET}}-strip build/libopenal.so
      - name: Upload artifact
        run: aws s3 cp build/libopenal.so s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}
      - name: Upload git revision
        run: |
          git config --global --add safe.directory $(pwd)
          git log --first-parent --pretty=format:%H --skip 1 -n 1 > libopenal.so.git
          aws s3 cp libopenal.so.git s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}


  freebsd-cross:
    name: FreeBSD Cross
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Build
        uses: cross-platform-actions/action@v0.27.0
        with:
          operating_system: freebsd
          architecture: x86-64
          version: '13.4'
          memory: 4G
          shell: bash
          run: |
            sudo pkg install -y cmake pkgconf gmake alsa-lib pulseaudio portaudio jackit dbus pipewire
            cmake -B build -DALSOFT_REQUIRE_RTKIT=ON -DALSOFT_REQUIRE_ALSA=ON -DALSOFT_REQUIRE_OSS=ON -DALSOFT_REQUIRE_PORTAUDIO=ON -DALSOFT_REQUIRE_PULSEAUDIO=ON -DALSOFT_REQUIRE_JACK=ON -DALSOFT_REQUIRE_PIPEWIRE=ON -DALSOFT_EMBED_HRTF_DATA=YES -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-U_FORTIFY_SOURCE -D_FORTIF=Y_SOURCE=0"
            cmake --build build --parallel
            strip build/libopenal.so
      - name: Upload artifact
        run: aws s3 cp build/libopenal.so s3://lwjgl-build/nightly/freebsd/x64/ ${{env.S3_PARAMS}}
      - name: Upload git revision
        run: |
          git config --global --add safe.directory $PWD
          git log --first-parent --pretty=format:%H --skip 1 -n 1 > libopenal.so.git
          aws s3 cp libopenal.so.git s3://lwjgl-build/nightly/freebsd/x64/ ${{env.S3_PARAMS}}

  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            CMAKE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_OSX_ARCHITECTURES=x86_64
          - ARCH: arm64
            CMAKE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Configure build
        run: cmake -B build -DALSOFT_REQUIRE_COREAUDIO=ON -DALSOFT_EMBED_HRTF_DATA=YES -DCMAKE_BUILD_TYPE=Release ${{matrix.CMAKE_PARAMS}}
      - name: Build
        run: |
          cmake --build build --parallel
          strip -u -r build/libopenal.dylib
      - name: Upload artifact
        run: aws s3 cp build/libopenal.dylib s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}
      - name: Upload git revision
        run: |
          git log --first-parent --pretty=format:%H --skip 1 -n 1 > libopenal.dylib.git
          aws s3 cp libopenal.dylib.git s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}

  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x86, x64, arm64]
        include:
          - ARCH: x86
            PLATFORM: Win32
          - ARCH: x64
            PLATFORM: x64
          - ARCH: arm64
            PLATFORM: ARM64
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Configure build
        #-T ClangCL
        run: cmake -B build -G "Visual Studio 17 2022" -A ${{matrix.PLATFORM}} -DALSOFT_REQUIRE_WINMM=ON -DALSOFT_REQUIRE_DSOUND=ON -DALSOFT_REQUIRE_WASAPI=ON -DALSOFT_EMBED_HRTF_DATA=ON -DFORCE_STATIC_VCRT=ON -DALSOFT_EAX=OFF
      - name: Build
        run: cmake --build build --config Release
      - name: Upload artifact
        run: aws s3 cp build\Release\OpenAL32.dll s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/OpenAL.dll ${{env.S3_PARAMS}}
      - name: Upload git revision
        run: |
          git log --first-parent --pretty=format:%%H --skip 1 -n 1 > OpenAL.dll.git
          aws s3 cp OpenAL.dll.git s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}
