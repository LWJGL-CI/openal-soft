name: LWJGL Build

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_PARAMS: --cache-control "public,must-revalidate,proxy-revalidate,max-age=0"

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm32, arm64]
        include:
          # -----
          - ARCH: x64
            PACKAGES: libpulse-dev portaudio19-dev libasound2-dev libjack-dev
            CC: CC=gcc CXX=g++
            CMAKE_PARAMS:
            STRIP: strip
          # -----
          - ARCH: arm32
            CROSS_ARCH: armhf
            PACKAGES: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
            CROSS_PACKAGES: libpulse-dev:armhf libglib2.0-dev:armhf portaudio19-dev:armhf libasound2-dev:armhf libjack-dev:armhf
            CC: CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++
            CMAKE_PARAMS: -DCMAKE_TOOLCHAIN_FILE=../XCompile-arm.txt -DHOST=arm-linux-gnueabihf -DPROCESSOR=arm
            STRIP: arm-linux-gnueabihf-strip
          # -----
          - ARCH: arm64
            CROSS_ARCH: arm64
            PACKAGES: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            CROSS_PACKAGES: libpulse-dev:arm64 libglib2.0-dev:arm64 portaudio19-dev:arm64 libasound2-dev:arm64 libjack-dev:arm64
            CC: CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++
            CMAKE_PARAMS: -DCMAKE_TOOLCHAIN_FILE=../XCompile-arm.txt -DHOST=aarch64-linux-gnu -DPROCESSOR=aarch64
            STRIP: aarch64-linux-gnu-strip
          # -----
          - ARCH: ppc64el
            CROSS_ARCH: ppc64el
            PACKAGES: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-ppc64el-cross
            CROSS_PACKAGES: libpulse-dev:ppc64el libglib2.0-dev:ppc64el portaudio19-dev:ppc64el libasound2-dev:ppc64el libjack-dev:ppc64el
            CC: CC=powerpc64le-linux-gnu-gcc CXX=powerpc64le-linux-gnu-g++
            CMAKE_PARAMS: -DCMAKE_TOOLCHAIN_FILE=../XCompile-arm.txt -DHOST=powerpc64le-linux-gnu -DPROCESSOR=ppc64el
            STRIP: powerpc64le-linux-gnu-strip
          # -----
#          - ARCH: mips64
#            CROSS_ARCH: mips64el
#            PACKAGES: gcc-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross
#            CROSS_PACKAGES: libpulse-dev:mips64el libglib2.0-dev:mips64el portaudio19-dev:mips64el libasound2-dev:mips64el libjack-dev:mips64el
#            CC: CC=mips64el-linux-gnuabi64-gcc CXX=mips64el-linux-gnuabi64-g++
#            CMAKE_PARAMS: -DCMAKE_TOOLCHAIN_FILE=../XCompile-arm.txt -DHOST=mips64el-linux-gnuabi64 -DPROCESSOR=mips64
#            STRIP: mips64el-linux-gnuabi64-strip
    env:
      LWJGL_ARCH: ${{matrix.ARCH}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - run: sudo apt-get -yq install ${{matrix.PACKAGES}}
        name: Install dependencies
      - run: |
          if [[ "${{matrix.ARCH}}" != "mips64" ]]
          then
            sudo sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
            sudo grep "ubuntu.com/ubuntu" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
            if [[ "${{matrix.ARCH}}" == "arm32" || "${{matrix.ARCH}}" == "arm64" ]]
            then
              sudo sed -i 's/amd64,i386/armhf,arm64/' /etc/apt/sources.list.d/ports.list
            elif [[ "${{matrix.ARCH}}" == "ppc64el" ]]
            then
              sudo sed -i 's/amd64,i386/ppc64el,ppc64el/' /etc/apt/sources.list.d/ports.list
            fi            
            sudo sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
          else
            sudo rm -rf /etc/apt/sources.list
            sudo sh -c "echo 'deb http://deb.debian.org/debian stretch main' >> /etc/apt/sources.list"
          fi
          sudo dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          sudo apt-get update || true
        if: contains(matrix.ARCH, 'x64') != true
        name: Prepare cross-compilation
      - run: sudo apt-get -yq --allow-unauthenticated --no-install-suggests --no-install-recommends install ${{matrix.CROSS_PACKAGES}} -o Dpkg::Options::="--force-overwrite"
        if: contains(matrix.ARCH, 'x64') != true
        name: Install cross-compilation dependencies
      - run: |
          cd build
          ${{matrix.CC}} cmake -DALSOFT_REQUIRE_ALSA=ON -DALSOFT_REQUIRE_OSS=ON -DALSOFT_REQUIRE_PORTAUDIO=ON -DALSOFT_REQUIRE_PULSEAUDIO=ON -DALSOFT_REQUIRE_JACK=ON -DALSOFT_EMBED_HRTF_DATA=YES -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" ${{matrix.CMAKE_PARAMS}} ..
        name: Configure build
      - run: |
          cd build
          cmake --build .
          ${{matrix.STRIP}} libopenal.so
        name: Build
      - run: aws s3 cp build/libopenal.so s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ $S3_PARAMS
        name: Upload artifact
      - run: |
          git log --first-parent --pretty=format:%H HEAD~2..HEAD~1 > libopenal.so.git
          aws s3 cp libopenal.so.git s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ $S3_PARAMS
        name: Upload git revision

  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            CMAKE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9
          - ARCH: arm64
            CMAKE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=arm64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - run: |
          cd build
          cmake -DALSOFT_REQUIRE_COREAUDIO=ON -DALSOFT_EMBED_HRTF_DATA=YES -DCMAKE_BUILD_TYPE=Release ${{matrix.CMAKE_PARAMS}} ..
        name: Configure build
      - run: |
          cd build
          cmake --build .
          strip -u -r libopenal.dylib
        name: Build
      - run: aws s3 cp build/libopenal.dylib s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/ $S3_PARAMS
        name: Upload artifact
      - run: |
          git log --first-parent --pretty=format:%H HEAD~2..HEAD~1 > libopenal.dylib.git
          aws s3 cp libopenal.dylib.git s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/ $S3_PARAMS
        name: Upload git revision

  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      matrix:
        ARCH: [x86, x64, arm64]
        include:
          - ARCH: x86
            PLATFORM: Win32
          - ARCH: x64
            PLATFORM: x64
          - ARCH: arm64
            PLATFORM: ARM64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - run: |
          cd build
          cmake -G "Visual Studio 17 2022" -A ${{matrix.PLATFORM}} -DALSOFT_REQUIRE_WINMM=ON -DALSOFT_REQUIRE_DSOUND=ON -DALSOFT_REQUIRE_WASAPI=ON -DALSOFT_EMBED_HRTF_DATA=ON -DFORCE_STATIC_VCRT=ON -DALSOFT_EAX=OFF ..
        shell: cmd
        name: Configure build
      - run: |
          cd build
          cmake --build . --config Release
        shell: cmd
        name: Build
      - run: aws s3 cp build\Release\OpenAL32.dll s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/OpenAL.dll ${{env.S3_PARAMS}}
        shell: cmd
        name: Upload artifact
      - run: |
          git log --first-parent --pretty=format:%%H HEAD~2..HEAD~1 > OpenAL.dll.git
          aws s3 cp OpenAL.dll.git s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}
        shell: cmd
        name: Upload git revision
